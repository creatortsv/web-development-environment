version: "3.7"

services:

    golang:
        image: "golang:${GOLANG_VERSION}-extended"
        restart: unless-stopped
        env_file: ./.env
        container_name: "golang-${GOLANG_VERSION}"
        tty: true

        build:
            context: ./golang
            dockerfile: Dockerfile
            args:
                GOLANG_VERSION: ${GOLANG_VERSION}
                GOLANG_DIST: ${GOLANG_DIST}

        volumes:
            - ~/GoProjects/:/var/go/

    db:
        image: "postgres:${POSTGRES_VERSION}"
        container_name: "postgres-${POSTGRES_VERSION}"
        restart: unless-stopped
        env_file: ./.env
        tty: true

        build:
            context: ./postgres
            dockerfile: Dockerfile
            args:
                POSTGRES_VERSION: ${POSTGRES_VERSION}

        environment:
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

        volumes:
            - type: volume
              source: postgres_data
              target: /var/lib/postgresql/data
              volume:
                nocopy: true

        ports:
            - "${POSTGRES_PORT}:5432"
            
        networks:
            - env-network
    
    node:
        image: "node:${NODE_VERSION}"
        container_name: "node-${NODE_VERSION}"
        restart: unless-stopped
        user: "root"
        tty: true
        stdin_open: true
        env_file: ./.env
        working_dir: /home/node

        # volumes:
            # - ~/ReactProjects/:/home/node/react/
            # - ~/JSProjects/:/home/node/js/
            # - ~/LaravelProjects/:/home/node/laravel/

        environment:
            NODE_ENV: ${NODE_ENV}

        ports:
            - "${NODE_PORT}:8080"

        networks:
            - env-network

        depends_on:
            - db
            - php

    php:
        image: "php:${PHP_VERSION}-extended"
        container_name: "php-${PHP_VERSION}"
        restart: unless-stopped
        user: "root"
        stdin_open: true
        tty: true
        env_file: ./.env
        working_dir: /var/www

        environment:
            POOL_NUMWORKERS: ${POOL_NUMWORKERS}
            GRPC_PORT: ${GRPC_PORT}

        build:
            context: ./php
            dockerfile: Dockerfile-${PHP_VERSION}
            args:
                - PHP_VERSION
                - PHP_DIST
                - USER_EMAIL
                - USER_NAME
                - GOLANG_VERSION
                - GRPC_VERSION
                - GRPC_PROTOBUF_VERSION
                - GRPC_PROTOC_GEN_PHP_GRPC_VERSION

        volumes:
          # - ~/.ssh/:/root/.ssh/
            - "~/PHPProjects/:${PHP_WORKING_DIR}/PHPProjects/"
            - "~/LaravelProjects/:${PHP_WORKING_DIR}/LaravelProjects/"
            - "~/SymfonyProjects/:${PHP_WORKING_DIR}/SymfonyProjects/"

        ports:
            - "${PHP_PORT}:8000"
            - "${GRPC_PORT}:50051"
            - "9090:9090"

        depends_on:
            - db
            - golang
            # - rabbit

        networks:
            - env-network

    rabbit:
        image: "rabbitmq:${RABBITMQ_VERSION}-extended"
        container_name: "rabbitmq-${RABBITMQ_VERSION}"
        restart: unless-stopped
        env_file: ./.env

        environment:
            RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}

        ports:
            - "${RABBITMQ_PORT}:5672"
            - "${RABBITMQ_PORT_MANAGEMENT}:15672"

        networks:
            - env-network

    elastic:
        image: "docker.elastic.co/elasticsearch/elasticsearch:${ELASTICSEARCH_VERSION}"
        container_name: elastic-${ELASTICSEARCH_VERSION}
        restart: unless-stopped
        env_file: ./.env

        environment:
            - node.name=elastic
            - cluster.initial_master_nodes=elastic
            - MAX_MAP_COUNT=262144

        ulimits:
            memlock:
                soft: -1
                hard: -1
        
        volumes:
            - type: volume
              source: elastic_data
              target: /usr/share/elasticsearch/data
              volume:
                nocopy: true

        ports:
            - ${ELASTICSEARCH_PORT}:9200

        networks:
            - env-network

volumes:
    postgres_data:
    rabbitmq_data:
    elastic_data:

networks:
    env-network:
        driver: bridge